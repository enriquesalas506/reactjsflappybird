{"version":3,"sources":["logo.svg","NeuralNetwork.js","Bird.js","Pipes.js","Game.js","App.js","reportWebVitals.js","index.js"],"names":["NeuralNetwork","model","inputnodes","hidden_nodes","outputnodes","tf","this","createModel","console","log","modelCopy","weights","getWeights","weightCopies","i","length","clone","setWeights","hidden","dense","units","inputShape","activation","add","output","inputs","xs","predict","dataSync","rate","p5","mutatedWeights","tensor","shape","values","slice","j","Math","random","guassianRandom","changeValue","newTensor","Bird","canvasX","canvasY","x","y","BRAIN","RADIUS","speedY","fitness","mouseX","mouseY","dead","brain","document","addEventListener","event","think","pipe","top","bottom","SPEEDX","goUp","hits","c","SAT","Circle","Vector","b","Box","WIDTH","toPolygon","b2","response","Response","response2","testPolygonCircle","hit","update","checkGame","draw","fill","ellipse","Pipes","randomY","hittop","hitbottom","white","color","rect","Game","props","createPipe","pipes","push","setup","canvasParentRef","createCanvas","parent","frameRate","window","buildBirds","totalBirds","total","floor","bestBrain","bird","birds","copy","increaseBirdFitness","birdsThink","birdHits","killBirds","highscore","brainNumber","forceUpdate","k","killbird","splice","resetGame","birdsUpdate","speed","background","counter","pipes_per_second","game_score","game_max_score","max","state","change","evolution","style","display","flexDirection","marginLeft","justifyContent","alignContent","alignItems","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","onChange","value","Button","onClick","React","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9fc5b5d3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as tf from '@tensorflow/tfjs';\n\n\nclass NeuralNetwork{\n\n\n    constructor(model,inputnodes, hidden_nodes,outputnodes){\n\n\n        if (model instanceof tf.Sequential) {\n            this.model = model;\n            this.inputnodes = inputnodes;\n            this.hidden_nodes = hidden_nodes;\n            this.outputnodes = outputnodes;\n\n            return;\n        }\n\n      //  console.log(\"BUILDING BRAIN\");\n\n\n        this.inputnodes = inputnodes;\n        this.hidden_nodes = hidden_nodes;\n        this.outputnodes = outputnodes;\n        this.model = this.createModel();\n\n\n    }\n\n\n    copy() {\n\n        console.log(\"COPY\");\n\n        return tf.tidy(() => {\n            const modelCopy = this.createModel();\n            const weights = this.model.getWeights();\n            const weightCopies = [];\n            for (let i = 0; i < weights.length; i++) {\n                weightCopies[i] = weights[i].clone();\n            }\n            modelCopy.setWeights(weightCopies);\n            return new NeuralNetwork(\n                modelCopy,\n                this.inputnodes,\n                this.hidden_nodes,\n                this.outputnodes\n            );\n        });\n    }\n\n\n     createModel(){\n\n\n         const model = tf.sequential();\n\n         const  hidden = tf.layers.dense({\n             units: this.hidden_nodes,\n             inputShape: [this.inputnodes],\n             activation: 'sigmoid'\n         });\n         model.add(hidden);\n         const output = tf.layers.dense({\n             units: this.outputnodes,\n             activation: 'softmax'\n         });\n         model.add(output);\n         return model;\n\n\n\n     }\n\n    predict(inputs) {\n        return tf.tidy(() => {\n            const xs = tf.tensor2d([inputs]);\n            const ys = this.model.predict(xs);\n            const outputs = ys.dataSync();\n            // console.log(outputs);\n            return outputs;\n        });\n    }\n\n    mutate(rate,p5) {\n\n\n      //  console.log(\"MUTATING BRAIN\");\n\n        tf.tidy(() => {\n            const weights = this.model.getWeights();\n            const mutatedWeights = [];\n            for (let i = 0; i < weights.length; i++) {\n                let tensor = weights[i];\n                let shape = weights[i].shape;\n                let values = tensor.dataSync().slice();\n                for (let j = 0; j < values.length; j++) {\n\n\n                    if (Math.random< rate) {\n\n\n                        let guassianRandom = (Math.random() - 0.5) * 2;\n\n\n                        let w = values[j];\n\n                        let changeValue = w + (guassianRandom * rate);\n\n                        //console.log(\"ORIGINAL VALUE \" + values[j] + \" MUTATION \" + changeValue);\n\n\n                        values[j] = changeValue;\n\n                    }\n\n\n                }\n                let newTensor = tf.tensor(values, shape);\n                mutatedWeights[i] = newTensor;\n            }\n            this.model.setWeights(mutatedWeights);\n        });\n    }\n\n}\n\nexport {NeuralNetwork}\n\n\n","import {NeuralNetwork} from \"./NeuralNetwork\";\nimport Collisions from 'collisions';\nimport  SAT from \"sat\";\n\n\n\nexport function Bird(canvasX,canvasY, x, y,BRAIN) {\n\n    const GRAVITY = 2;\n    const LIFT = -20;\n\n\n    this.RADIUS = 50;\n    this.speedY = 0;\n    this.x = x;\n    this.y = y;\n\n    this.fitness =0;\n\n    this.mouseX = 0;\n    this.mouseY = 0;\n\n    this.dead = false;\n\n\n\n\n    if (BRAIN == null) {\n\n     //   console.log(\"Bird With New Brain\");\n\n        this.brain = new NeuralNetwork(null, 6, 8, 2);\n\n    }else{\n\n      //  console.log(\"Bird With Copy\");\n        this.brain = new NeuralNetwork(BRAIN, 6, 8, 2);\n\n    }\n\n\n\n    document.addEventListener('mousemove', (event) => {\n     //   console.log(`Mouse X: ${event.clientX}, Mouse Y: ${event.clientY}`);\n\n        //this.x = event.clientX;\n        //this.y = event.clientY;\n    });\n\n\n\n\n\n    this.think = function (pipe) {\n\n        let inputs = [];\n\n        inputs[0] = this.y;\n        inputs[1] = pipe.top;\n        inputs[2] = pipe.bottom;\n        inputs[3] = pipe.x;\n        inputs[4] = pipe.SPEEDX;\n        inputs[5] = this.speedY;\n\n        let output = this.brain.predict(inputs);\n\n\n       // console.log(\"BIRD THINKS \"+JSON.stringify(output));\n\n        if (output[0] > output[1]){\n\n            this.goUp();\n        }\n\n\n    }\n\n    this.hits = function (pipe) {\n\n\n        var c = new SAT.Circle(new SAT.Vector(this.x  ,this.y ), 1);\n\n        var b = new SAT.Box(new SAT.Vector(pipe.x,0), pipe.WIDTH, pipe.top).toPolygon();\n\n        var b2 = new SAT.Box(new SAT.Vector(pipe.x,pipe.bottom), pipe.WIDTH, pipe.canvasY - pipe.bottom).toPolygon();\n\n\n\n\n\n        var response = new SAT.Response();\n        var response2 = new SAT.Response();\n\n\n        if (SAT.testPolygonCircle(b,c,response)){\n\n           // console.log(\"COLIDED\");\n\n            pipe.hit(true,false);\n            this.dead = true;\n        }\n\n        if (SAT.testPolygonCircle(b2,c,response2)){\n\n\n            pipe.hit(false,true);\n            this.dead = true;\n\n\n         //   console.log(\"COLIDED 2\");\n        }\n\n\n\n    }\n\n\n    this.goUp = function(){\n\n\n        this.speedY =  LIFT;\n\n\n\n\n\n    }\n\n\n    this.update = function (p5) {\n\n\n\n        this.checkGame();\n        this.draw(p5);\n\n\n    }\n\n\n\n    this.checkGame = function () {\n\n\n        this.y = this.y + this.speedY;\n        this.speedY = this.speedY + GRAVITY;\n\n        if (this.y > canvasY){\n\n\n            this.speedY = 0;\n            this.y = canvasY;\n\n           return;\n        }\n\n        if (this.y < 0){\n\n\n            this.speedY = 0;\n            this.y = 0;\n\n            return;\n        }\n\n\n\n\n\n    }\n\n    this.draw = function (p5) {\n\n\n\n\n        p5.fill(255,255,255,100);\n\n        p5.ellipse(this.x,this.y,this.RADIUS,this.RADIUS);\n\n\n\n    }\n\n\n}\n\n\n\n","\nexport function Pipes(p5,canvasX,canvasY) {\n\n\n    const MIN_PIPE_BOTTOM = 200;\n\n    let randomY = Math.random() * (canvasY -MIN_PIPE_BOTTOM);\n\n    this.x = canvasX;\n\n    this.top = randomY;\n    this.bottom = randomY + 200;\n\n    this.canvasX = canvasX;\n    this.canvasY = canvasY;\n\n\n    this.p5 = p5;\n    this.SPEEDX = 15\n    this.WIDTH = 50;\n\n\n    this.hittop = false;\n    this.hitbottom = false;\n\n\n\n\n    this.update = function () {\n\n\n\n        this.checkGame();\n\n        this.draw();\n\n\n    }\n\n\n    this.hit = function (top,bottom) {\n\n\n        this.hittop = top;\n        this.hitbottom = bottom;\n\n\n\n\n    }\n\n\n\n    this.checkGame = function () {\n\n\n        this.x = this.x - this.SPEEDX;\n\n\n\n\n    }\n\n    this.draw = function () {\n\n\n        let white = this.p5.color(255, 255, 255);\n        this.p5.fill(white);\n\n\n\n        if (this.hittop == true){\n            let color = this.p5.color(255, 0, 0);\n            this.p5.fill(color);\n        }\n\n        this.p5.rect(this.x,0,this.WIDTH,this.top);\n        this.p5.fill(white);\n\n\n        if (this.hitbottom == true) {\n            let color = this.p5.color(255, 0, 0);\n            this.p5.fill(color);\n        }\n\n        this.p5.rect(this.x,this.bottom,this.WIDTH,canvasY - this.bottom);\n\n        this.p5.fill(white);\n\n\n    }\n\n\n}\n\n\n\n","import React from \"react\";\nimport {Pipes} from \"./Pipes\";\nimport {Bird} from \"./Bird\";\nimport Sketch from \"react-p5\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\n\n\nconst MINIMUM_PIPES_PER_SECOND = 1;\nconst MAX_PIPERS_PER_SECOND = 5;\n\nconst DEFAULT_CANVAS_SIZE_X = 500;\nconst DEFAULT_CANVAS_SIZE_Y = 500;\n\nclass Game extends React.Component {\n\n\n\n    constructor(props) {\n        super(props);\n        this.state = { change: true };\n\n        this.x = 50;\n        this.y = 50;\n        this.birds = [];\n\n        this.highscore = 0;\n        this.game_max_score = 0;\n        this.game_score = 0;\n\n        this.evolution = 0;\n\n        this.bestBrain = null;\n        this.brainNumber = 0;\n\n\n\n        this.pipes = [];\n        this.counter = 0;\n\n        this.canvasX = 1080;\n        this.canvasY = 500;\n\n        this.speed = 1;\n        this.totalBirds = 5;\n\n        this.pipes_per_second = MINIMUM_PIPES_PER_SECOND;\n\n\n    }\n\n\n\n\n    createPipe = (p5) =>{\n\n\n        let pipe = new Pipes(p5,this.canvasX,this.canvasY);\n        this.pipes.push(pipe);\n\n\n    }\n\n\n    setup = (p5, canvasParentRef) => {\n        // use parent to render the canvas in this ref\n        // (without that p5 will render the canvas outside of your component)\n        p5.createCanvas(this.canvasX, this.canvasY).parent(canvasParentRef);\n\n\n        p5.frameRate(30);\n\n\n        window.addEventListener(\"click\",() =>{\n\n\n            //   bird.goUp();\n\n        })\n\n        this.buildBirds(this.totalBirds);\n\n\n    };\n\n\n\n    buildBirds = (total) =>{\n\n        for (let x = 0; x < total; x++){\n\n\n            let randomY =   Math.floor(Math.random() * this.canvasY)+10;\n\n            if (this.bestBrain == null) {\n\n                let bird = new Bird(this.canvasX,this.canvasY,50, randomY);\n                this.birds.push(bird);\n\n            }else {\n\n                let bird = new Bird(this.canvasX,this.canvasY,50, randomY,this.bestBrain.copy());\n                //  bird.brain.mutate(0.05)\n                this.birds.push(bird);\n\n\n            }\n\n        }\n\n\n    }\n\n\n    increaseBirdFitness = () =>{\n\n        for (let x = 0; x < this.birds.length;x++) {\n\n            //   bird.fitness = bird.fitness + 1;\n            let bird = this.birds[x];\n            bird.fitness = bird.fitness + 1;\n\n            // console.log(\"BIRD FITNESS \"+bird.fitness+\" HGIHSCORE \"+highscore);\n\n        }\n    }\n\n\n    birdsThink = () =>{\n\n        for (let x = 0; x < this.birds.length;x++) {\n\n            for (let y = 0; y < this.pipes.length;y++) {\n\n                let pipe = this.pipes[y];\n                let bird = this.birds[x];\n\n\n                if (pipe.x < bird.x){\n                    continue;\n                }\n\n                bird.think(pipe);\n\n\n            }\n\n\n        }\n    }\n    birdHits = (p5) =>{\n\n        let killBirds = [];\n\n        for (let x = 0; x < this.birds.length;x++) {\n\n\n            let bird = this.birds[x];\n            bird.hits(this.pipes[0]);\n\n\n            if (bird.dead == true){\n\n                killBirds.push(bird);\n\n\n                //   console.log(\"BIRD FITNESS \"+bird.fitness+\" Highscore \"+highscore);\n                if (bird.fitness > this.highscore){\n                    //HIGHLY SELECTED BIRD\n\n\n                    console.log(\"BEST BRAIN\");\n\n                    this.highscore = bird.fitness;\n                    this.bestBrain = bird.brain.copy();\n                    this.brainNumber = this.brainNumber +1;\n\n                    this.forceUpdate();\n\n\n\n                }\n\n\n\n\n\n            }\n\n\n        }\n\n        for (let k  = 0; k< killBirds.length; k++){\n\n            let killbird = killBirds[k];\n\n            for (let x = 0; x < this.birds.length; x++  ) {\n\n                let bird = this.birds[x];\n\n                if (killbird == bird) {\n                    this.birds.splice(x, 1);\n                    break;\n                }\n\n            }\n\n\n            if (this.birds.length == 0){\n                this.resetGame();\n            }\n\n        }\n\n\n\n\n\n\n\n    }\n\n    birdsUpdate = (p5) =>{\n\n        for (let x = 0; x < this.birds.length;x++) {\n\n            let bird = this.birds[x];\n            bird.update(p5);\n\n\n\n        }\n    }\n\n    draw = (p5) => {\n\n\n        for (let i = 0; i < this.speed; i++) {\n\n            p5.background(0);\n\n            if (this.counter % (120 - (90 * (this.pipes_per_second/MAX_PIPERS_PER_SECOND)))  == 0) {\n\n                this.createPipe(p5);\n            }\n\n            this.counter++;\n\n            for (let x = 0; x < this.pipes.length; x++) {\n\n                let pipe = this.pipes[x];\n                pipe.update();\n\n                if (pipe.x < 0) {\n\n                    //  console.log(\"DELETEING PIPE\");\n                    //remove from array\n                    this.pipes.splice(x, 1);\n                    pipe = null;\n                    this.game_score++;\n                    this.game_max_score = Math.max(this.game_max_score,this.game_score);\n                    this.forceUpdate();\n\n\n                    //--------- INCREASE SCORE\n\n                    this.increaseBirdFitness();\n\n\n                }\n\n            }\n\n            if (this.pipes.length > 0) {\n\n\n                this.birdsThink();\n                this.birdHits(p5);\n\n\n            }\n\n\n            this.birdsUpdate(p5);\n\n\n        }\n\n\n    };\n\n\n    resetGame =() =>{\n\n        console.log(\"RESET GAME HIGHSCORE \"+this.highscore);\n\n        this. pipes = null;\n        this. pipes = [];\n\n        this.birds = null;\n        this.birds = [];\n\n        this.highscore = 0;\n        this.game_score = 0;\n\n        this.forceUpdate();\n\n        this.buildBirds(this.totalBirds);\n\n\n    }\n\n\n    render() {\n        return (\n            <div>\n\n\n\n                <div style={{display:\"flex\",flexDirection:\"row\"}}>\n                <Sketch setup={this.setup} draw={this.draw} />\n\n\n                <div style={{marginLeft:100,display:\"flex\",justifyContent:\"flex-start\",flexDirection:\"column\",alignContent:\"flex-start\",alignItems:\"flex-start\"}}>\n\n                    <p> {\"Speed of simulation \"+this.speed}</p>\n                    <Slider\n                        defaultValue={1}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        marks\n                        min={1}\n                        max={10}\n                        onChange={(event,value) =>{\n\n                            this.speed = value;\n                            this.forceUpdate();\n\n                        }}\n                    />\n\n                    <p>{\"Total Mutations \"+this.totalBirds}</p>\n                    <Slider\n                        defaultValue={5}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        marks\n                        min={1}\n                        max={100}\n                        onChange={(event,value) =>{\n\n                            this.totalBirds = value;\n                            this.forceUpdate();\n\n                        }}\n                    />\n\n                    <p>{\"Difficulty \"+this.pipes_per_second}</p>\n                    <Slider\n                        defaultValue={MINIMUM_PIPES_PER_SECOND}\n                        aria-labelledby=\"discrete-slider\"\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        marks\n                        min={MINIMUM_PIPES_PER_SECOND}\n                        max={MAX_PIPERS_PER_SECOND}\n                        onChange={(event,value) =>{\n\n                            this.pipes_per_second = value;\n                            this.forceUpdate();\n\n                        }}\n                    />\n\n\n\n\n                    <p>{\"Current Score \"+this.game_score}</p>\n                    <p>{\"Max Score \"+this.game_max_score}</p>\n                    <p>{\"Brain Number \"+this.brainNumber}</p>\n\n                    <Button color=\"primary\" onClick={()=>{\n                        this.resetGame();\n                    }}>Reset Game</Button>\n\n\n\n\n\n\n                </div>\n\n                </div>\n\n\n\n\n            </div>\n        );\n    }\n}\n\nexport default Game;\n","import logo from './logo.svg';\nimport './App.css';\nimport Sketch from \"react-p5\";\nimport React from \"react\";\nimport {Bird} from \"./Bird\";\nimport {Pipes} from \"./Pipes\";\nimport * as tf from '@tensorflow/tfjs';\nimport Game from \"./Game\";\n\n\nfunction App() {\n\n\n\n\n\n\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n\n\n         <Game></Game>\n\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}